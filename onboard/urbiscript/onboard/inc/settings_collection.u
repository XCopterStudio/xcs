
// Contains dictionary: configuration name => parameters
class SettingsCollection {
    
    enum XObjectFlags {
        SPECIAL,
        RECEIVER,
    };
    
    var configToFlag_ = [
        "special" => XObjectFlags.SPECIAL,
        "receiver" => XObjectFlags.RECEIVER
    ];
    
    var collection_ = [ => ];
    
    function init(settingPaths) {
        for(var path: settingPaths) {
            var settings = XSettings.new(path, false);
            for(var key: settings.getKeys("")) {
                if(key in collection_) {
                    XCS_LOG_WARN("Ingored configuration name '" + key + "'.");
                    continue;
                };
                collection_[key] = processConfiguration_(settings, key);
            };
        };
    };
    
    function getCollection() {
        /* return */ collection_;
    };
             
    function processConfiguration_(settings, configurationName) {
        var result = settings.getMap(configurationName);
        
        if(!("prototype" in result)) {
            result["prototype"] = configurationName;
        };
        
        if(!("file" in result)) {
            result["file"] = result["prototype"].toLower();
        };
        
        if(!("args" in result)) {
            result["args"] = "";
        };
     
        result["flags"] = [];
        for(var kvp: configToFlag_) {
            if(kvp.first in result && result[kvp.first]) {
                result["flags"] << kvp.second;
            };
        };
        
        /* return */ result;
    };


} |;