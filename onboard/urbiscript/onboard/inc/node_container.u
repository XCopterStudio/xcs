class NodeContainer {
    
    enum SourceFiles {
        CPP,
        URBISCRIPT,
        NOTFOUND
    };
    
    class XObjectStates {
        var STATE_CREATED = 0;
        var STATE_STARTED = 1;
        var STATE_STOPPED = 2;                
    };
    
    var settingsCollection_;            // settings aggregator, configuration name => init info
    var loadedXObjects_ = [ => ];       // prototypeName => SourceFiles)
    var prototypeInfo_ = [];            // item is a dictionary with info
    var createdNodes_ = [ => ];         // clone name => configuration name
    var createdConnections_ = [ => ];   // connection name => UConnection
    var registeredXVars_ = [ => ];      // register xvar name => unregister method message
    
    var context_;                       // keeps reference to auxiliar object that aren't a node of DFG
    var lobby_;

    function init(settingsCollection, context) {
        // NOTE: workaroud since SettingsCollection cannot inherit Dictionary
        settingsCollection_ = settingsCollection.getCollection(); 
        settingsCollection_.addProto(settingsCollection);
        
        context_ = context;
        lobby_ = Lobby.create();
        lobby_.addProto(context_);
        checkAndLoad_();
        fillPrototypeInfo_();  
    };
    
    function reset() {
        prototypeInfo_.clear();
        fillPrototypeInfo_();  
    };

    function getPrototypesInfo(flags = [], notFlags = []) {
        var result = [];
        for(var info: prototypeInfo_){
            var prototypeFlags = settingsCollection_[info["name"]]["flags"];
            var include = true;
            for(var flag: flags) {
                if(!(flag in prototypeFlags)) {
                    include = false;
                    break;
                };
            };
            for(var flag: prototypeFlags) {                
                if(flag in notFlags) {
                    include = false;
                    break;
                };
            };
            if(include) {
                result << info;
            };
        };
        /* return */ result;
    };
    
    function createNode(configurationName, cloneName) {
        if(cloneName in createdNodes_) {
            return false;
        };
        var configuration = settingsCollection_[configurationName];
        var createCode = configuration["prototype"] + ".new(" + configuration["args"] + ")";
        var node = System.eval(createCode, lobby_);
        lobby_.setSlot(cloneName, node);
        createdNodes_[cloneName] = configurationName;
        
        /*
         * Some nodes are created specially (depends on flags)
         */
        if(settingsCollection_.XObjectFlags.RECEIVER in configuration["flags"]) {
            context_.jsonReceiver.addReceiver("data", node);
        };

        /* return */ true;
    };
    
    function destroyNode_(cloneName) {
        if(!(cloneName in createdNodes_)) {
            return false;
        };
        
        var configuration = settingsCollection_[createdNodes_[cloneName]];

        // find connections to remove
        var connToRemove = [];
        for(var conn: createdConnections_) {
            if(conn.second["srcName"] == cloneName || conn.second["dstName"] == cloneName) {
                connToRemove << conn.first;
            };
        };

        // remove connections to remove
        for(var connId in connToRemove) {
            createdConnections_[connId]["conn"].disconnect();
            createdConnections_.erase(connId);
        };

        // find registerxvar method to remove
        var regToRemove = [];
        for(var reg: registeredXVars_) {
            if(reg.second["srcName"] == cloneName || reg.second["dstName"] == cloneName) {
                regToRemove << reg.first();
            };
        };

        // remove registerxvar method to remove
        for(var regName in regToRemove) { 
            this.callMessage(registeredXVars_[regName]["unregister"]);
            registeredXVars_.erase(regName);
        };


        /*
         * Process flagged nodes specially.
         */
        if(settingsCollection_.XObjectFlags.RECEIVER in configuration["flags"]) {
            context_.jsonReceiver.removeReceiver("data");
        };
        
        lobby_.getLocalSlot(cloneName).value = nil;
        lobby_.removeLocalSlot(cloneName);
        createdNodes_.erase(cloneName);
        
        /* return */ true;
    };
    
    function destroyNodes(cloneName = nil) {
        var changed = [];
        for(var cloneNameIt: getNodeNames()) {
            if(cloneName && cloneNameIt != cloneName) {
                continue;
            };
            // remove node
            if(destroyNode_(cloneNameIt)) {                
                changed << cloneNameIt;
            };

        };
        /* return */ changed;
    };
    
    function getNode(cloneName) {
        /* return */ lobby_.getSlot(cloneName).value();
    };
    
    function hasNode(cloneName) {
        /* return */ lobby_.hasSlot(cloneName);
    };

    function getNodeNames() {
        /* return */ createdNodes_.keys;
    };
    
    function connectNodes(srcName, srcPort, dstName, dstPort) {
        if(hasNode(srcName) && hasNode(dstName)) {
            var srcNode = getNode(srcName);
            var dstNode = getNode(dstName);
        
            var srcPort = srcNode.getSlot(srcPort);
            var dstPort = dstNode.getSlot(dstPort);
            var connId =  srcPort.asString() + " >> " + dstPort.asString();
        
            if(connId not in createdConnections_) {
                var conn = srcPort >> dstPort;
                createdConnections_[connId] = [
                    "conn" => conn,
                    "srcName" => srcName,
                    "dstName" => dstName,
                ];
                return true;
            };
        };

        /* return */ false;
    };
    
    function disconnectNodesNotIn(list) {
        var disconnectedNodes = [];

        var idList = [];
        for(var conn: list) {
            if(hasNode(conn[0]) && hasNode(conn[2])) {
                var srcNode = getNode(conn[0]);
                var dstNode = getNode(conn[2]);

                var srcPort = srcNode.getSlot(conn[1]);
                var dstPort = dstNode.getSlot(conn[3]);
                var connId =  srcPort.asString() + " >> " + dstPort.asString();

                idList << connId;
            };
        };

        var connToRemove = [];
        for(var conn: createdConnections_) {
            if(conn.first() not in idList) {
                connToRemove << conn.first();
            };
        };

        for(var connId in connToRemove) {
            createdConnections_[connId]["conn"].disconnect();
            createdConnections_.erase(connId);
            disconnectedNodes << connId;
        };

        return disconnectedNodes;
    };

    function registerXVar(srcName, srcPort, dstName, dstPort) {
        if(hasNode(srcName) && hasNode(dstName)) {
            // get nodes
            var src = getNode(srcName);
            var dst = getNode(dstName);

            // get source slot
            var srcSlot = src.getSlot(srcPort); 

            // get data types
            var synT = src.getSynType(srcPort);
            var semT = src.getSemType(srcPort);

            var srcChannelName = createChannelName(srcName, srcPort);
            var dstChannelName = createChannelName(dstName, dstPort);
            var channelName = createChannelName(srcChannelName, dstChannelName);

            // execute register xvar method
            if(channelName not in registeredXVars_) {
                callMethod(dst, dstPort, srcChannelName, semT, synT, srcSlot);

                registeredXVars_[channelName] = [
                    "unregister" => getUnregisterXVarMethod(dst, dstPort, srcChannelName),
                    "srcName" => srcName,
                    "dstName" => dstName,
                ];

                return true;
            };
        };

        return false;
    };

    function unregisterXVarsNotIn(list) {
        var unregisterXVars = [];

        var nameList = [];
        for(var reg: list) {            
            var srcChannelName = createChannelName(reg[0], reg[1]);
            var dstChannelName = createChannelName(reg[2], reg[3]);
            var channelName = createChannelName(srcChannelName, dstChannelName); 

            nameList << channelName;
        };

        var regToRemove = [];
        for(var reg: registeredXVars_) {
            if(reg.first() not in nameList) {
                regToRemove << reg.first();
            };
        };

        for(var regName in regToRemove) { 
            this.callMessage(registeredXVars_[regName]["unregister"]);
            registeredXVars_.erase(regName);
            unregisterXVars << regName;
        };

        return unregisterXVars;
    };

    function startNodes(cloneName = nil) {
        var changed = [];
        for(var cloneNameIt: getNodeNames()) {
            var node = lobby_.getLocalSlot(cloneNameIt).value();
            if(node.getState() != XObjectStates.STATE_STARTED) {
                if(!cloneName || cloneNameIt == cloneName) {
                    node.start();
                    changed << cloneNameIt;
                };
            };
        };
        /* return */ changed;
    };
    
    function stopNodes(cloneName = nil) {
        var changed = [];
        for(var cloneNameIt: getNodeNames()) {
            var node = lobby_.getLocalSlot(cloneNameIt).value();
            if(node.getState() == XObjectStates.STATE_STARTED) {
                if(!cloneName || cloneNameIt == cloneName) {
                    node.stop();
                    changed << cloneNameIt;
                };
            };
        };
        /* return */ changed;
    };
    
    function checkAndLoad_() {
        // check definitions
        var xObjectFiles = [ => ];
        for(var kvp: settingsCollection_) {
            var configurationName = kvp.first;
            var configuration = kvp.second;
            
            if(configuration["prototype"] in xObjectFiles && xObjectFiles[configuration["prototype"]] != configuration["file"]) {
                XCS_LOG_ERROR("Ambiguous file for prototype '" + configuration["prototype"] + "'");
                continue;
            };
            xObjectFiles[configuration["prototype"]] = configuration["file"];
        };
        
        // load common resources
        load("nodes/x_object.u", lobby_);
        System.eval(XCS.getStructs4RegCode(), lobby_);
        
        for(var kvp: xObjectFiles) {
            try {
                XCS_LOG_INFO("Loading CPP " + kvp.second);
                System.loadModule(kvp.second);
                loadedXObjects_[kvp.first] = SourceFiles.CPP;
            } catch(var e) {
                try {
                    XCS_LOG_INFO("Loading URBISCRIPT " + kvp.second);
                    load(kvp.second, lobby_); // NOTE: we're loading it in the context of this (the container)
                    loadedXObjects_[kvp.first] = SourceFiles.URBISCRIPT;
                } catch(var e) {
                     XCS_LOG_ERROR("Cannot load '" + kvp.second + "'.\nCause:\n" + e.asString().asPrintable() + "\n");
                     continue;
                };
            };
        };        
    };
    
    function fillPrototypeInfo_() {
        for(var kvp: settingsCollection_) {
            var configurationName = "?";

            try {
                configurationName = kvp.first;
                var configuration = kvp.second;
            
                var createCode = configuration["prototype"] + ".new(" + configuration["args"] + ")";
                var dummyNode = System.eval(createCode, lobby_);
                
                // prepare data about xvars
                var varList = [];
                for(var xv: dummyNode.getXVars()) {
                    var pVar = [ => ];
                    pVar["name"] = xv;
                    pVar["synType"] = dummyNode.getSynType(xv);
                    pVar["semType"] = dummyNode.getSemType(xv);
                    varList << pVar;
                };

                // prepare data about input ports
                var portList = [];
                for(var xip: dummyNode.getXInputPorts()) {
                    var pPort = [ => ];
                    pPort["name"] = xip;
                    pPort["synType"] = dummyNode.getSynType(xip);
                    pPort["semType"] = dummyNode.getSemType(xip);
                    portList << pPort;
                };
            
            
                // get info and prepare data about registerXVar functions
                var registerXVars = [];
                if(dummyNode.hasSlot("registerXVar") && dummyNode.hasSlot(createUnregisterXVarMethodName("registerXVar"))) {
                    registerXVars << "registerXVar";
                };
            
                prototypeInfo_ << [
                    "name" => configurationName,
                    "var" => varList,
                    "inputPort" => portList,
                    "registerXVar" => registerXVars,
                ];
            
                // force GC
                dummyNode = nil;
            } catch(var ex) {
                XCS_LOG_ERROR("Cannot load info about node \"" + configurationName + "\": " + ex.message() + "!");
            }
        };
    };
    
    /*
     * Utility functions
     */

    //at least need 2 args: target, method name, args
    function callMethod {
        call.target = call.evalArgAt(0);
        call.message = call.evalArgAt(1);
    
        var args = [];
        for(var i = 2; i < call.argsCount; ++i) {
            args << call.args[i];
        };
        call.args = args;

        call.target.callMessage(call);
    };

    function createChannelName(nodeName, portName) {
        nodeName + "__" + portName;
    };

    function createUnregisterXVarMethodName(registerXVarMethodName) {
        "un" + registerXVarMethodName;
    };

    function getUnregisterXVarMethod(dst, dstPort, srcChannelName) {
        call.target = this;
        call.message = "callMethod";

        var methodName = createUnregisterXVarMethodName(dstPort);

        call.args = [ 
            Lazy.new(function(){ dst; }), 
            Lazy.new(function(){ methodName; }), 
            Lazy.new(function(){ srcChannelName; })
        ];

        return call;
    };
};

