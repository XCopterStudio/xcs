class Executor : XObject {
    class State {
        var IDLE = "idle";
        var RUNNING = "running";
        var FREEZED = "freezed";
    };
    var inputs_ = [
        "code" => Pair.new(String, "URBISCRIPT"),
        "control" => Pair.new(String, "CONTROL"),
    ];
    var outputs_ = [
        "state" => Pair.new(String, "EXECUTION_STATE"),
        "error" => Pair.new(String, "EXECUTION_ERROR"),
        "output" => Pair.new(String, "EXECUTION_OUTPUT"),
    ];
    var state_ = 0; // NOTE: this is necessary to do in every clone of the XObject prototype
    
    function init(lobby) {
        // Inputs
        var this.code = "";
        var this.control = "";
        // Outputs
        var this.state = State.IDLE;
        var this.error = nil;
        var this.output = nil;

        var this.lobby_ = lobby;
        var this.tag = Tag.new();
        var this.job;
        var that = this;
        
        at(this.tag.leave?) {
            that.state = that.State.IDLE;
        };
        
        /*
         * Redefine lobby's echo so that we can use output
         * in user code.
         * 
         * NOTE: works only on top level (this == lobby_)
         * NOTE: doesn't work for channels (cout <<, etc.)
         */
        var myEcho = function(string) {
            that.output = string.asString() + "\n"; // TODO test on windows, define some built dependent constant
        };
        
        if(lobby_.hasLocalSlot("echo")) { // NOTE: this will modify global lobby once for all :-(
            lobby_.echo = myEcho;
        } else {
            var lobby_.echo = myEcho;
        };
        
        &control.notifyChange(function() {
            if(that.state_ != 1) {
                return;
            };
            if(that.control == "run") {
                //TODO consider cleaning all lobby slots that aren't nodes for repeated runs, or simply wrap the code in a scope {...}
                that.state = that.State.RUNNING;
                that.job = disown({that.tag:{
                    try {
                        System.eval(that.code, that.lobby_);                    
                    } catch(var e) {
                        that.error = e.asString();
                    };
                }}); // run in background                
            } else if(that.control == "freeze") {
                that.tag.freeze();
                that.state = that.State.FREEZED;
            } else if(that.control == "unfreeze") {
                that.state = that.State.RUNNING;
                that.tag.unfreeze();
            } else if(that.control == "stop") {
                that.tag.stop();
                that.job.terminate();
                // NOTE: state will be set in event handler for tag leave
            }
        });
    }|;
    
}|;
