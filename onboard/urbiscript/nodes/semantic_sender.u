class SemanticSender : XObject {
    var data_ = [ => ]; // last stored value
    var metadata_ = [ => ]; // metadata of stored values
    var registerData_ = [ => ]; // data name => subscription
    
    var lastSentData_ = [ => ];
    var sentCount_ = 0;
    var maxSendCount_ = 3;

    function init(adapter, json, refreshFrequency) {        
        var this.tag_ = Tag.new();
        var this.job_ = nil;
        var this.bufferMtx_ = Mutex.new();
        
        var this.state_ = 0;
        var this.adapter = adapter;
        var this.json = json;
        var this.period = 1 / refreshFrequency;


        at(this.state_->changed?) {
            switch(this.state_) {
                case 1:
                    start_();
                case 2:
                    stop_();
            };
        };
    }|;
    
    function start_() {
        if(!job_) {
            job_ = disown({tag_: {
                every(period) {
                    flush_()
                };
            }});
        } else {
            tag_.unfreeze();
        };
    };
    
    function stop_() {
        if(!job_) {
            return;
        };
        tag_.freeze();
    };
    
    function flush_() {
        var toSend;
        bufferMtx_: {
            toSend = data_.clone();
            data_.clear();
        };
        if(!toSend) {
            return;
        };
        
        var that = this;
        var metadata = toSend.keys.map(function(it) { that.metadata_[it];});
        var serialized = this.json.encode([
            "type" => "data",
            "data" => toSend,
            "metadata" => metadata,
        ]);
        this.adapter.send(serialized + "\n");                    

    };
    
    function registerXVar(name, semanticType, syntacticType, uvar) {
        var that = this;
        this.metadata_[name] = semanticType;

        this.registerData_[name] = uvar.notifyChange(function() {
            that.bufferMtx_: that.data_[name] = uvar.value();
        });
    };

    function unregisterXVar(name) {
        this.registerData_[name].disconnected = true;
        this.registerData_.erase(name);
    };

    function finalize() {
        tag_.stop();
        job_.terminate();
    }|;
}|;