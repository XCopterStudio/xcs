class SemanticSender : XObject {
    var tag = Tag.new();
    var job;
    
    var data_ = [ => ]; // last stored value
    var metadata_ = [ => ]; // metadata of stored values
    var registerData_ = [ => ]; // data name => subscription
    
    var lastSentData_ = [ => ];
    var sentCount_ = 0;
    var maxSendCount_ = 3;

    function init(adapter, json, refreshFrequency) {        
        var this.state_ = 0; // TODO find out why behaves weird
        var this.adapter = adapter;
        var this.period = 1 / refreshFrequency;


        // run in background
        this.job = disown({this.tag: {
            every(this.period) {
                /*echo("Comparing"); echo(data_); echo("and"); echo(lastSentData_);
                if(data_ != lastSentData_ || sentCount_ < maxSendCount_) {*/
                    var serialized = json.encode([
                        "type" => "data",
                        "data" => this.data_,
                        "metadata" => this.metadata_
                    ]);

                    this.adapter.send(serialized + "\n");                    

                    /*if(data_ != lastSentData_) {
                        lastSentData_ = data_.clone();
                        sentCount_ = 0;
                    } else if(sentCount_ < maxSendCount_) {
                        ++sentCount_;
                    };
                };*/
            };
        }});
        
        at(this.state_->changed?) {
            switch(this.state_) {
                case 0:
                    this.tag.freeze();
                case 1:
                    this.tag.unfreeze();
                case 2:
                    this.tag.freeze();
            };
        };

        state_ = 0;
    }|;
    
    function registerXVar(name, semanticType, syntacticType, uvar) {
        try {
            var that = this;
            this.data_[name] = nil; // last stored value
            this.metadata_[name] = semanticType;

            this.registerData_[name] = uvar.notifyChange(function() {
                that.data_[name] = uvar.value();
            });
        } catch(var ex) {
            echo(ex.asString()); throw ex;
        }
    }|;

    function unregisterXVar(name) {
        this.registerData_[name].disconnected = true;
        this.registerData_.erase(name);
    };

    function finalize() {
        this.tag.stop();
        this.job.terminate();
    }|;
}|;