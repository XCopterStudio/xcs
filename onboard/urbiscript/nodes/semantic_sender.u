class SemanticSender : XObject {
    var tag = Tag.new();
    var job;
    
    var data_ = [ => ]; // last stored value
    var metadata_ = [ => ]; // metadata of stored values
    
    function init(adapter, UJson, refreshFrequency) {        
        var this.state_ = 0; // TODO find out why behaves weird
        var this.adapter = adapter;
        var this.period = 1 / refreshFrequency;


        // run in background
        this.job = disown({this.tag: {
            every(this.period) {
                var serialized = UJson.encode([
                    "type" => "data",
                    "data" => this.data_,
                    "metadata" => this.metadata_
                ]);
                

                this.adapter.send(serialized + "\n");                    
            };
        }});
        
        at(this.state_->changed?) {
            switch(this.state_) {
                case 0:
                    this.tag.freeze();
                case 1:
                    this.tag.unfreeze();
                case 2:
                    this.tag.freeze();
            };
        };

        state_ = 0;
    }|;
    
    function registerXVar(name, semanticType, syntacticType, uvar) {
        try {
            var that = this;
            this.data_[name] = nil; // last stored value
            this.metadata_[name] = semanticType;

            uvar.notifyChange(function() {
                that.data_[name] = uvar.value();
            });
        } catch(var ex) {
            echo(ex.asString()); throw ex;
        }
    }|;

    function finalize() {
        this.tag.stop();
        this.job.terminate();
    }|;
}|;