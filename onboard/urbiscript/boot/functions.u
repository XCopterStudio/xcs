function serverConnect(ip, port, xci, xciVersion = "xci_parrot") {
    var adapter = Adapter.new();
    adapter.start(ip, port);

    // create graph nodes
    var semanticSender = SemanticSender.new(adapter, [
        "altitude" => "altitude",
        "phi" => "phi",
        "psi" => "psi",
        "theta" => "theta",
        "alive" => "alive",
    ], UJson, 8); // frequency in Hz of refresh frequency for web GUI

    var flyParamReceiver = SemanticReceiver.new(adapter, [
        "roll" => "roll",
        "pitch" => "pitch",
        "yaw" => "yaw",
        "gaz" => "gaz",
        "command" => "command"
    ], UJson);

    var flashSender = FlashSender.new(adapter, UJson);

    flashSender.send("Created graph nodes.");

    // connect graph nodes
    if(xciVersion == "xci_parrot") {
        xci.&altitude >> semanticSender.&altitude;
        xci.&phi >> semanticSender.&phi;
        xci.&psi >> semanticSender.&psi;
        xci.&theta >> semanticSender.&theta;
    };
    if(xciVersion == "xci_dodo") {
        xci.&alive >> semanticSender.&alive;
        xci.&altitude >> semanticSender.&altitude;
    };

    flyParamReceiver.&roll >> xci.&roll;
    flyParamReceiver.&pitch >> xci.&pitch;
    flyParamReceiver.&yaw >> xci.&yaw;
    flyParamReceiver.&gaz >> xci.&gaz;
    flyParamReceiver.&command >> xci.&command;

    flashSender.send("Connected graph nodes.");
    semanticSender.start(); // this is blocking call, so its at the end
}|;

function Global.crop(value, max) {
    if(value.abs() > max) value.sign() * max else value; // pseudo-ternary operator
}|;

function Global.ground(value, min) {
    if(value.abs() > min) value else 0; // pseudo-ternary operator
}|;

function Global.inRangeBool(value, range) {
     if (value.abs() <= range) 1 else 0; // pseudo-ternary operator
}| ;
