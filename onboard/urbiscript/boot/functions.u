function serverConnect(ip, port, xci, xciVersion = "xci_parrot") {

    var adapter = Adapter.new();
    adapter.start(ip, port);

    // semantic sender node
    var semanticSender = SemanticSender.new(adapter, [
        "altitude" => "ALTITUDE",
        "phi" => "PHI",
        "psi" => "PSI",
        "theta" => "THETA",
        "alive" => "ALIVE",
        "battery" => "BATTERY",
    ], UJson, 8); // frequency in Hz of refresh frequency for web GUI

    // Fly params receiver
    var flyParamReceiver = Receiver.new("data", [
        "roll" => "ROLL",
        "pitch" => "PITCH",
        "yaw" => "YAW",
        "gaz" => "GAZ",
        "command" => "COMMAND"
    ]);
    // Onboard state receiver
    var onboardReceiver = Receiver.new("onboard", [
        "mode" => "MODE",
    ]);

    var semanticReceiver = SemanticReceiver.new(adapter, UJson);
    semanticReceiver.addReceiver(onboardReceiver);
    semanticReceiver.addReceiver(flyParamReceiver);

    var flashSender = FlashSender.new(adapter, UJson);
    flashSender.send("Graph nodes created.");

    /*
     * Connecting graph nodes.
     */
    flyParamReceiver.&roll >> xci.&roll;
    flyParamReceiver.&pitch >> xci.&pitch;
    flyParamReceiver.&yaw >> xci.&yaw;
    flyParamReceiver.&gaz >> xci.&gaz;
    flyParamReceiver.&command >> xci.&command;

    onboardReceiver.&mode >> Onboard.&changeMode;

    if(xciVersion == "xci_parrot") {
        xci.&altitude >> semanticSender.&altitude;
        xci.&phi >> semanticSender.&phi;
        xci.&psi >> semanticSender.&psi;
        xci.&theta >> semanticSender.&theta;
        xci.&battery >> semanticSender.&battery;
    };
    if(xciVersion == "xci_dodo") {
        xci.&alive >> semanticSender.&alive;
        xci.&altitude >> semanticSender.&altitude;
    };

    flashSender.send("Graph nodes connected.");
    semanticSender.start(); // this is blocking call, so its at the end
}|;

function Global.crop(value, max) {
    if(value.abs() > max) value.sign() * max else value; // pseudo-ternary operator
}|;

function Global.ground(value, min) {
    if(value.abs() > min) value else 0; // pseudo-ternary operator
}|;

function Global.inRangeBool(value, range) {
     if (value.abs() <= range) 1 else 0; // pseudo-ternary operator
}|;

function Global.angleLinComb(alpha, beta, a, b) {
    var x = a * alpha.cos() + b * beta.cos();
    var y = a * alpha.sin() + b * beta.sin();
    y.atan2(x); // result
}|;
