function serverConnect(ip, port, xci, xciVersion = "xci_parrot") {

    var adapter = Adapter.new();
    adapter.start(ip, port);

    // semantic sender node
    var semanticSender = SemanticSender.new(adapter, [
        "altitude" => "ALTITUDE",
        "phi" => "PHI",
        "psi" => "PSI",
        "theta" => "THETA",
        "alive" => "ALIVE",
        "battery" => "BATTERY",
    ], UJson, 8); // frequency in Hz of refresh frequency for web GUI

    // Fly params receiver
    var flyParamReceiver = Receiver.new("data", [
        "roll" => "ROLL",
        "pitch" => "PITCH",
        "yaw" => "YAW",
        "gaz" => "GAZ",
        "command" => "COMMAND"
    ]);
    // Onboard state receiver
    var onboardReceiver = Receiver.new("onboard", [
        "mode" => "MODE",
    ]);

    var semanticReceiver = SemanticReceiver.new(adapter, UJson);
    semanticReceiver.addReceiver(onboardReceiver);
    semanticReceiver.addReceiver(flyParamReceiver);

    var flashSender = FlashSender.new(adapter, UJson);
    flashSender.send("Graph nodes created.");

    /*
     * Connecting graph nodes.
     */
    flyParamReceiver.&roll >> xci.&roll;
    flyParamReceiver.&pitch >> xci.&pitch;
    flyParamReceiver.&yaw >> xci.&yaw;
    flyParamReceiver.&gaz >> xci.&gaz;
    flyParamReceiver.&command >> xci.&command;

    onboardReceiver.&mode >> Onboard.&changeMode;

    if(xciVersion == "xci_parrot") {
        xci.&altitude >> semanticSender.&altitude;
        xci.&phi >> semanticSender.&phi;
        xci.&psi >> semanticSender.&psi;
        xci.&theta >> semanticSender.&theta;
        xci.&battery >> semanticSender.&battery;
    };
    if(xciVersion == "xci_dodo") {
        xci.&alive >> semanticSender.&alive;
        xci.&altitude >> semanticSender.&altitude;
    };

    flashSender.send("Graph nodes connected.");
    semanticSender.start(); // this is blocking call, so its at the end
}|;

function autostart(aligner, xci, lineMaster) {
    var lineFinder = lineMaster._lineFinder;
    var lineKeeper = lineMaster._lineKeeper;
    
    function takeOff(wait) {
        echo("Sent take off");
        xci.command = "TakeOff";
        sleep(wait);
        echo("Still after take off");
    };
    
    function land() {
        aligner.tyg.stop();
        aligner.trp.stop();
        xci.command = "Land";
        
    };
    
    function rise(limit) {
        aligner.yawEnabled = 0;
    
        aligner.adjustYG(),;
        while(xci.altitude < limit) {
            sleep(2s);
        };
        echo("Flight level attained.");
    };
    
    function hasLine() {
        lineMaster.stop();
        var originalDistanceThr = lineFinder.hystDistanceThr;
        
        lineFinder.expectedDistance = 0;
        lineFinder.expectedDeviation = 0;
        lineFinder.hystDistanceThr = 0.5;
        
        sleep(100ms); // at least few frames with new settings
        
        while(!lineFinder.hasLine && lineFinder.expectedDeviation <= 0.pi()) {
            lineFinder.expectedDeviation += lineFinder.hystDeviationThr;
            sleep(100ms); // at least few frames with new settings
        };
        
        if(!lineFinder.hasLine) {
            return false;
        } else {
            lineKeeper.reset(lineFinder.distance, lineFinder.deviation);
            lineFinder.hystDistanceThr = originalDistanceThr;
            lineMaster.start();
            return true;
        };        
    };
    
    function randomMove() {
        xci.roll = (10.random() - 5) / 100;
        xci.pitch = (10.random() - 5) / 100;
        sleep(500ms);
        xci.roll = 0;
        xci.pitch = 0;
    };
    
    function findLine(attempts) {
        while(!hasLine() && attempts > 0) {
            randomMove();
            attempts -= 1;
        };
        lineFinder.hasLine;
    };
    
    takeOff(6s);
    rise(1.45),; // block because of adjustYG
    sleep(5s); // rise is nonblocking but we'd need blocking
    if(!findLine(5)) {
        echo("Giving up, landing");
        land();
        return;
    };
    echo("Found line");
    
    aligner.yawEnabled = 1;
    echo("Enabled yaw.");
    sleep(4s);
    
    aligner.adjustRP(),;
    echo("Started RP");
    echo("Flying...");
}|;

function Global.crop(value, max) {
    if(value.abs() > max) value.sign() * max else value; // pseudo-ternary operator
}|;

function Global.ground(value, min) {
    if(value.abs() > min) value else 0; // pseudo-ternary operator
}|;

function Global.inRangeBool(value, range) {
     if (value.abs() <= range) 1 else 0; // pseudo-ternary operator
}|;

function Global.angleLinComb(alpha, beta, a, b) {
    var x = a * alpha.cos() + b * beta.cos();
    var y = a * alpha.sin() + b * beta.sin();
    y.atan2(x); // result
}|;
