class Frontier2Aligner{

    var xci;
    var lineProvider;
    var rollPidParam;
    var yawPidParam;
    var pitchPidParam;
    var gazPidParam;
    var tyg = Tag.new("tyg");
    var trp = Tag.new("trp"); 
    var gazAltitude = 1.5;
    var forward = 0;

    // Default values in seconds
    // ! most likely to be overwritten !
    var ygInterval = 0.2;
    var rpInterval = 0.2;
    var rpSleep = 0.05;
    var rollThreshold = 0.02;
    var pitchDistance = 0.1;
    var pitchDeviation = 0.1;
    


    function init(xci, lineProvider, rollPidParam, yawPidParam, pitchPidParam, gazPidParam) {
        this.xci = xci;
        this.lineProvider = lineProvider;
        this.rollPidParam = rollPidParam;
        this.yawPidParam = yawPidParam;
        this.pitchPidParam = pitchPidParam;
        this.gazPidParam = gazPidParam;
    };

    var pidLoop = function (pidParams, value) {
        var correctedValue = value + pidParams.lastDerivation * pidParams.timeDelay;
        
        pidParams.sumI += correctedValue;
        var derivation = correctedValue - pidParams.lastValue;
        pidParams.lastValue = correctedValue;
        pidParams.lastDerivation = derivation;

        return pidParams.p*correctedValue + pidParams.i*pidParams.sumI + pidParams.d*derivation; 
    };

    function adjustYG(){
        this.tyg: every(this.ygInterval){
            var deviation = lineProvider.deviation;
            // +/- pi (hopefully unnecessary)
            var yaw = pidLoop(yawPidParam,deviation);
            xci.yaw = yaw; 
            
            var altDif = gazAltitude - xci.altitude;
            var gaz = pidLoop(gazPidParam, altDif);
            xci.gaz = gaz; 
            echo("yaw:\t\t" + yaw + "\tgaz\t\t\t\t" + gaz);
        },
    };

    function adjustRP(){
        this.trp: every(this.rpInterval){
            var distance = lineProvider.distance;
            var deviation = lineProvider.deviation;
            
            /* ROLL */
            var rollError = distance * deviation.cos() - forward * deviation.sin();
            var roll = pidLoop(rollPidParam, rollError);
            
            /* PITCH */
            var pitchError = distance * deviation.sin() + forward * deviation.cos();
            var pitch = pidLoop(pitchPidParam, pitchError);


            /* Common control */            
            echo("roll: " + roll + "\t\t pitch:\t\t" + pitch);
            xci.pitch = pitch; 
            xci.roll = roll; 
            sleep(this.rpSleep);
            xci.pitch = 0;
            xci.roll = 0;
            echo("RP released");
        },
    };

}|;
