class NodeContainer {
    
    enum SourceFiles {
        CPP,
        URBISCRIPT,
        NOTFOUND
    };
    
    var settingsCollection_; // settings aggregator, configuration name => init info
    var loadedXObjects_ = [ => ]; // prototypeName => SourceFiles)
    var prototypeInfo_ = []; // item is a dictionary with info
    
    var lobby_;

    function init(settingsCollection) {
        settingsCollection_ = settingsCollection.getCollection(); // NOTE: workaroud since SettingsCollection cannot inherit Dictionary
        checkAndLoad_();
        fillPrototypeInfo_();
        lobby_ = Lobby.create();
    };
    
    function getPrototypesInfo() {
        /* return */ prototypeInfo_;
    };
    
    function createNode(configurationName, cloneName) {
        var configuration = settingsCollection[configurationName];
        var createCode = configuration["prototype"] + ".new(" + configuration["args"] + ")";
        var node = System.eval(createCode, lobby_);
        lobby_.setSlot(cloneName, node);
    };
    
    function connectNodes(srcName, srcPort, dstName, dstPort) {
        var srcNode = lobby_.getLocalSlot(srcName).value();
        var dstNode = lobby_.getLocalSlot(dstName).value();
        
        // TODO here should be checked function connect
        srcNode.getLocalSlot(srcPort) >>  dstNode.getLocalSlot(targetPort);
    };
    
    function checkAndLoad_() {
        // check definitions
        var xObjectFiles = [ => ];
        for(var kvp: settingsCollection_) {
            var configurationName = kvp.first;
            var configuration = kvp.second;
            
            if(configuration["prototype"] in xObjectFiles && xObjectFiles[configuration["prototype"]] != configuration["file"]) {
                XCS_LOG_ERROR("Ambiguous file for prototype '" + configuration["prototype"] + "'");
            };
            xObjectFiles[configuration["prototype"]] = configuration["file"];
        };
        
        // load resources
        load("nodes/xobject.u");
        for(var kvp: xObjectFiles) {
            try {
                XCS_LOG_INFO("Loading CPP " + kvp.second);
                System.loadModule(kvp.second);
                loadedXObjects_[kvp.first] = SourceFiles.CPP;
            } catch(var e) {
                try {
                    XCS_LOG_INFO("Loading URBISCRIPT " + kvp.second);
                    load(kvp.second); // TODO context in which load executes
                    loadedXObjects_[kvp.first] = SourceFiles.URBISCRIPT;
                } catch(var e) {
                     XCS_LOG_ERROR("Cannot load '" + kvp.second + "'.\nCause:\n" + e + "\n");
                };
            };
        };        
    };
    
    function fillPrototypeInfo_() {
        for(var kvp: settingsCollection_) {
            var configurationName = kvp.first;
            var configuration = kvp.second;
            
            var createCode = configuration["prototype"] + ".new(" + configuration["args"] + ")";
            var dummyNode = System.eval(createCode, this); // TODO think about this
                
            // prepare data about xvars
            var varList = [];
            for(var xv: dummyNode.getXVars()) {
                var pVar = [ => ];
                pVar["name"] = xv;
                pVar["synType"] = dummyNode.getSynType(xv);
                pVar["semType"] = dummyNode.getSemType(xv);
                varList << pVar;
            };

            // prepare data about input ports
            var portList = [];
            for(var xip: dummyNode.getXInputPorts()) {
                var pPort = [ => ];
                pPort["name"] = xip;
                pPort["synType"] = dummyNode.getSynType(xip);
                pPort["semType"] = dummyNode.getSynType(xip);
                portList << pPort;
            };
            
            
            // get info and prepare data about registerXVar functions
            var registerXVars = [];
            if(dummyNode.hasSlot("registerXVar")) {
                registerXVars << "registerXVar";
            };
            
            prototypeInfo_ << [
                "name" => configurationName,
                "var" => varList,
                "inputPort" => portList,
                "registerXVar" => registerXVars,
            ];
            
            // force GC
            dummyNode = nil;
        };
    };
    
};

