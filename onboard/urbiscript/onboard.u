class Onboard {

    class XcsPaths {
        var settings = { if("XCS_SETTINGS_PATH" in System.env) Path.new(System.env["XCS_SETTINGS_PATH"]) else Path.cwd / "xsettings" };
        var dfgs = { if("XCS_DFGS_PATH" in System.env) Path.new(System.env["XCS_DFGS_PATH"]) else Path.cwd / "dfgs" };

        function getSettings(filename) {
            (settings / filename).asString();
        }|; 
    };
    
    var nodeContainer_;
    var onboardSettings_;
    var dfgStorage_;
    
    var sender_;
    var receiver_;
    
    var ddfg_ = "";
    
    function init() {
        // load core deps // TODO better onboard paths
        load("boot/logging.u");
        load("boot/adapter.u");
        load("boot/dfg_storage.u");
        load("boot/node_container.u");
        load("boot/json_receiver.u");
        load("settings_collection.u");
        
        System.loadModule("xsettings");
        System.loadModule("xjson");
        System.loadModule("ujson");
        
        // load onboard settings
        onboardSettings_ = XSettings.new(XcsPaths.getSettings("onboard.xs"), false);
        
        // prepare context
        var context = Object.new();
        var context.adapter = Adapter.new();
        
        var json = XJson.new(); // TODO add JSON to context
        var context.jsonReceiver = JsonReceiver.new(context.adapter, json);
        var context.jsonSender; // TODO
        
        var context.xcsPaths = XcsPaths;

        
        // load nodes settings
        var settingsCollection = SettingsCollection.new([XcsPaths.getSettings("xobjects.xs")]);
        nodeContainer_ = NodeContainer.new(settingsCollection, context);
        
        // prepare storage
        dfgStorage_ = DfgStorage.new(XcsPaths.dfgs);
        loadDdfg_();
        
        // start communication
        context.adapter.start(onboardSettings_.get("serverHost"), onboardSettings_.get("serverPort"));
        
        sender_ = OnboardSender.new(context.adapter, json);
        
        // initialize onboard receiver 4 communication with server
        context.jsonReceiver.addReceiver("onboard", this);
        
    };
      

    /*
     * Handling requests
     */
    
    function receive(request) {
        request = request["request"]; // backward compatibility
        if(!request.has("id") || !request.has("requestData") || !request.has("requestId")) {
            //TODO: what to do with errors? send to client?
            echo("ERROR(doRequest): bad request format: " + request.asString());
            return;
        };

        var id = request["id"];
        var requestData = request["requestData"];
        var requestId = request["requestId"];
        var responseData = "";
        var responseType = "Done";

        try {
            switch(id) {
                case "DFG_LOAD_METADATA":
                    responseData = doDfgLoadMetadata_();
                case "DFG_CREATE":
                    responseData = doDfgCreate_(requestData);
                case "DFG_START":
                    responseData = doDfgStart_(requestData);
                case "DFG_STOP":
                    responseData = doDfgStop_(true, requestData);
                case "DFG_RESET":
                    responseData = doDfgReset_(true, requestData);
                case "DFG_SAVE":
                    responseData = doDfgSave_(requestData);
                case "SAVED_DFG":
                    responseData = doSavedDfg_();
                case "DFG_LOAD":
                    responseData = doLoadDfg_(requestData);
                default:
                    echo("...unknown request");
                    responseData = "Unknown request: " + id + ".";
                    responseType = "Error";
            };
        } catch(var ex) {
            //TODO: what to do with errors? send to client? + send current state (all created/started/stopped nodes)
            echo("ERROR(" + id + "): " + ex.asString());
            responseData = ex.message();
            responseType = "Error";
        };

        try {
            this.sender_.sendResponse(id, responseType, responseData, requestId);
        } catch(var ex) {
            echo("ERROR while try to send respond: " + ex.asString());
        };
    };
    
  
    // send info about loaded xobjects and default dfg
    function doDfgLoadMetadata_() {
        nodeContainer_.reset();

        var data = [ => ];
        data["prototype"] = nodeContainer_.getPrototypesInfo([], [SettingsCollection.XObjectFlags.SPECIAL]);
        data["prototypeSpecial"] = nodeContainer_.getPrototypesInfo([SettingsCollection.XObjectFlags.SPECIAL]);
        data["ddfg"] = this.ddfg_;

        return data;
    };
    
    /*
     * DFG nodes manipulation
     */
    
    // reset old dfg and create new one
    function doDfgCreate_(requestData) {
        var createdNodes = [];
        var createdConnections = [];
        var destroyedConnections = [];
        var registeredXVars = [];
        var unregisteredXVars = [];
        var created = false;
        var errorMessage = "";

        try {
            // prototypes
            for(var p: requestData["prototype"]) {
                var id = p["id"];
                var name = p["name"];
                
                errorMessage = id;

                if(nodeContainer_.createNode(name, id)) {
                    createdNodes << id;
                    created = true;
                };

                errorMessage = "";
            };

            // connections
            var connections = [];
            for(var l: requestData["link"]) {
                var sourceId = l["source"]["id"];
                var sourcePort = l["source"]["port"];
                var targetId = l["target"]["id"];
                var targetPort = l["target"]["port"];
                
                errorMessage = sourceId + "." + sourcePort + " >> " + targetId + "." + targetPort;

                var connected = nodeContainer_.connectNodes(sourceId, sourcePort, targetId, targetPort);
                if(connected) {
                    createdConnections << l;
                    created = true;
                };
                
                connections << (sourceId, sourcePort, targetId, targetPort);

                errorMessage = "";
            };

            destroyedConnections = nodeContainer_.disconnectNodesNotIn(connections);
            if(destroyedConnections.size() > 0) {
                created = true;
            };

            // register xvars
            var registrations = [];
            for(var r: requestData["registerXVar"]) {
                var sourceId = r["source"]["id"];
                var sourcePort = r["source"]["port"];
                var targetId = r["target"]["id"];
                var targetPort = r["target"]["port"];

                errorMessage = sourceId + "." + sourcePort + " register to " + targetId + "." + targetPort;
                
                var registered = nodeContainer_.registerXVar(sourceId, sourcePort, targetId, targetPort);
                if(registered) {
                    registeredXVars << r;
                    created = true;
                };

                registrations << (sourceId, sourcePort, targetId, targetPort);

                errorMessage = "";
            };

            unregisteredXVars = nodeContainer_.unregisterXVarsNotIn(registrations);
            if(unregisteredXVars.size() > 0) {
                created = true;
            };
        } catch(var ex) {
            for(var node: createdNodes) {
                doDfgReset_(false, node);
            };

            if(errorMessage == "") {
                throw ex;
            }
            else {
                throw Exception.new(errorMessage + ": " + ex.message());
            };
        };

        if(!created) {
            throw Exception.new("nothing to create");
        }; 
        
        return [
            "prototype" => createdNodes,
            "link" => createdConnections.size(),
            "unlink" => destroyedConnections.size(),
            "registerXVar" => registeredXVars.size(),
            "unregisterXVar" => unregisteredXVars.size(),
        ];
    };

    function doDfgStart_(cloneName = nil) {
        var changed = nodeContainer_.startNodes(cloneName);
        
        if(!changed) {
            throw Exception.new("nothing to start");
        };

        return changed;
    };

    function doDfgStop_(checkStopped, cloneName = nil) {
        var changed = nodeContainer_.stopNodes(cloneName);
        
        if(checkStopped && !changed) {
            throw Exception.new("nothing to stop");
        };

        return changed;
    };
    
    // stop all xobjects and delete them and optionally resend info about loaded xobjects
    function doDfgReset_(resend, cloneName = nil) {
        doDfgStop_(false, cloneName);

        var destroyed = nodeContainer_.destroyNodes(cloneName);

        // send info about loaded xobjects
        var data = [ => ];
        if(resend && !cloneName) {
            data = doDfgLoadMetadata_();
        };

        data["destroyed"] = destroyed;

        return data;
    };
    
    /*
     * DFG load and save
     */
    function doDfgSave_(requestData) {
        var filename = requestData["filename"];
        var rewrite = requestData["rewrite"];
        var dfg = requestData["DFG"];
        
        dfgStorage_.save(dfg, filename, rewrite);

        //resend info about saved dfg
        return doSavedDfg_();
    };


    function doLoadDfg_(filename) {
        var dfg = [ => ]; 
        dfg["filename"] = filename;
        dfg["DFG"] = dfgStorage_.load(filename);
        
        return dfg;
    };


    function doSavedDfg_() {
        var data = [ => ];
        data["savedDfg"] = dfgStorage_.getGraphs();

        return data;
    };
    
    function loadDdfg_() {
        this.ddfg_ = dfgStorage_.load(onboardSettings_.get("defaultDfg"));
    };
}|;


var onboard = Onboard.new() |;
