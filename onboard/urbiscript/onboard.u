System.system("start cmd.exe /k \"node d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/xcs/server/server.js\"")|;
sleep(2s);

class Onboard {
    var xobjects4load_ = [ => ];            // list of pairs (xobjects, which are yet not loaded; path)
    var loadedXObjects_ = [ => ];           // list of pairs (loaded xobjects; copies)
    var loadedPrivateObjects_ = [ => ];     // list of pairs (loaded uobjects; copies)
    var privateObjects_ = [];               // objects, which are not visible for user
    var dataFlowGraph_ = "";                // data flow graph
    var dfgCommStarted_ = false;            // data flow graph communication started
    var onboardSender_;
    var xobjectsSettings_;
    var xobjectInfo_ = [ => ];

    function init() {
        echo("init...");

        loadSettings_();

        loadCore_();

        // initialize onboard sender 4 communication with server
        var adapter = Adapter.new();
        adapter.start("127.0.0.1", 1234);
        this.onboardSender_ = OnboardSender.new(adapter, UJson);

        // initialize sending information about data flow graph
        initDfgCommunication_();
        startDfgCommunication();

        // find all possible xobjects
        loadXObjectsPath_();

        //DEBUG: test load wanted xobjects
        //var xos = [];
        //for(var xo: xobjects) {
        //    if(["xci_dodo", "xci_parrot", "onboard", "datalogger"].has(xo.basename().split(".").front())) {
        //        xos << xo;
        //    };
        //};
        //xos << "neexsitujici_xobject";
        //xobjects = xos;
        //// load wanted xobjects
        //loadXObjects_(xobjects);
        //echo(Onboard.localSlotNames());

        //DEBUG: test send dataflow graph data
        //this.dataFlowGraph_ = "<xml><block type=\"connect\" id=\"2\" x=\"148\" y=\"385\"><field name=\"XOB1\">subject</field><field name=\"XVAR1\">out</field><field name=\"XOB2\">observer</field><field name=\"XVAR2\">in</field></block></xml>";
        //this.dataFlowGraph_ = "test data flow graph";
        

        //this.loadedXObjects_["xxci"] = ["xci_dodooo"];
        
        //sleep(1s);
        //this.loadedXObjects_["xci"] = ["xci1", "xci2"];
        

        //this.loadedXObjects_["xci"] = ["xciiiiiiiiii_dodo", "xciiiiiiiiiiii_parrot"];
        //stopDfgCommunication();
        //this.dataFlowGraph_ = "test 2 data flow graph";
        //this.loadedXObjects_["xci2"] = ["xci2_dodo", "xci2_parrot"];
        //startDfgCommunication();
        //this.dataFlowGraph_ = "test 3 data flow graph";
        //this.loadedXObjects_["xci3"] = ["xci3_dodo", "xci3_parrot"];

        ///
        /// DEBUG: SETTINGS
        ///

        //var this.settings = XSettings.new("d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/projects/onboard/lib/Release/onboard.xs");
        //echo(">>>" + this.settings.getOrDefault("test1", "aaaaaaa"));
        //echo(">>>" + this.settings.getOrDefault("section1.test2", "bbbbbb"));
        //echo(">>>" + this.settings.getOrDefault("test3", "cccccc"));
        //echo(">>>" + this.settings.getOrDefault("test4", "ddddddd"));
        ////echo(">>>" + this.settings.get("test5"));
        ////this.settings.setAndSave("test5", "tramtadaaaaaaaaaaa");
        //echo(">>>" + this.settings.get("test5"));

        //var settings = XSettings.new("d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/xcs/onboard/xsetting/xobjects.xs");
        //echo(">>>" + settings.getOrDefault("onboard", "???"));
        //echo(">>>" + settings.getOrDefault("onboarddddd", "???"));
        //echo(">>>" + settings.contains("onboard"));
        //echo(">>>" + settings.contains("onboarddddd"));
        //echo(">>>" + settings.contains("onboard.name"));
        //echo(">>>" + settings.contains("onboard.init"));
        //echo(">>>" + settings.getOrDefault("onboard.name", "XXX"));
        //echo(">>>" + settings.getOrDefault("onboard.init", "XXX"));

        //echo(">>>" + this.xobjectsSettings_.getOrDefault("onboard", "???"));
        //echo(">>>" + this.xobjectsSettings_.getOrDefault("onboarddddd", "???"));
        //echo(">>>" + this.xobjectsSettings_.contains("onboard"));
        //echo(">>>" + this.xobjectsSettings_.contains("onboarddddd"));

        ///
        /// Debug: create new clone by settings
        ///

        //var initText = 
        //    this.xobjectsSettings_.getOrDefault("onboard.name", "onboard") + 
        //    ".new(" + 
        //        this.xobjectsSettings_.getOrDefault("onboard.init", "") + 
        //    ");";
        //echo(">>>" + initText);

        //echo(">>>" + this.xobjectsSettings_.contains("onboard.name"));
        //echo(">>>" + this.xobjectsSettings_.contains("onboard.init"));


        ///
        /// read multiple init settings
        ///

        //var m = this.xobjectsSettings_.getMap("xxci.init");
        ////var m = this.xobjectsSettings_.getMap("oonboard.init");
        //echo("........................");
        //for(var i: m) {
        //    echo(i.first + " => " + i.second); 
        //};
        //echo("........................");


        //var l = ["onboard", "xxci", "xsettings"];
        //echo(".......................................................");
        //for(var xo: l){
        //    var m = this.xobjectsSettings_.getXObjectSettings(xo);
        //    for(var kvp: m) {
        //        echo("... " + kvp.first);
        //        echo("...... name = " + kvp.second.name);
        //        echo("...... filename = " + kvp.second.filename);
        //        echo("...... init param = " + kvp.second.initParam);
        //    };
        //};
        //echo(".......................................................");

    };

    // initialize sending information about data flow graph
    function initDfgCommunication_() {
        // initialization 4 sending information about current data flow graph
        this.dataFlowGraph_ = "";
        at(this.&dataFlowGraph_.changed?) {
            if(this.dfgCommStarted_) {
                this.onboardSender_.sendDataFlowGraph(this.dataFlowGraph_);
            };
        };

        // initialization 4 sending information about xobjects
        var this.loadedXObjectsEvent_ = this.loadedXObjects_.elementAdded.'||'(this.loadedXObjects_.elementChanged).'||'(this.xobjects4load_.elementAdded);
        at(this.loadedXObjectsEvent_?) {
            if(this.dfgCommStarted_) {
                var prototypesData = [];
                var clonesData = [];

                // prepare data for yet not loaded xobjects
                for(var kvpXO: this.xobjects4load_) {
                    var pData = [ => ];
                    
                    try {
                        pData["name"] = kvpXO.first();
                        //pData["var"] = ...;
                        //pData["inputPort"] = ...;
                    }
                    catch(var ex){
                        echo("!!!!!ERROR: " + ex.asString());
                        pData.clear();
                    };

                    if(!pData.empty()) {
                        prototypesData << pData;
                    };
                };

                for(var p: this.loadedXObjects_) {
                    var pData = [ => ];

                    try {
                    //TODO: transform module name 2 xobject name - read from ini file?

                        //var xvarName = p.first().asString();


                        //var xvarNames = [];
                        
                        //var xvarName = p.first().asString();
                        //xvarNames << xvarName;
                        
                        //var xvarNameParths = xvarName.split("_");
                        //xvarName = "";
                        //for(var parth: xvarNameParths) {
                        //    if(parth.size() > 0) {
                        //        xvarName = xvarName + parth[0].toUpper();
                        //        xvarName = xvarName + parth[1, parth.size()];
                        //    };
                        //};
                        //xvarNames << xvarName;

                        //var xvarFound = false;
                        //for(var name: xvarNames) {
                        //    echo("----------------- " + name);
                            
                        //    xvarFound = false;
                        //    try {
                        //        var xvars = System.eval(name + ".getXVars()");
                        //        echo(xvars.asString());

                        //        var xinputPorts = System.eval(name + ".getXInputPorts()");
                        //        echo(xinputPorts.asString());
                        //        xvarFound = true;
                        //    }
                        //    catch(var ex) {
                        //        echo(name + " not found");
                        //        xvarFound = false;
                        //    };

                        //    echo("++++++++++++++++++ ");

                        //    if(xvarFound) {
                        //        break;
                        //    };
                        //};

                        var key = p.first().asString();
                        echo("--- " + key);
                        try {
                            var name = this.xobjectsSettings_.getOrDefault(key + ".name", key);
                            var xvars = System.eval(name + ".getXVars()");
                            echo(xvars.asString());
                        }
                        catch(var ex) {
                            echo(key + " not found: " + ex.asString());
                        };
                        
                    

                        //pData["name"] = ...;
                        //pData["var"] = ...;
                        //pData["inputPort"] = ...;
                    }
                    catch(var ex) {
                        echo("chyba: " + ex.asString());
                    };

                    prototypesData << pData;
                };

                // send data
                this.onboardSender_.sendPrototypeClone(prototypesData, clonesData);
            };
        };
    };

    function startDfgCommunication() {
        this.dfgCommStarted_ = true;
    };

    function stopDfgCommunication() {
        this.dfgCommStarted_ = false;
    };

    function loadScripts_(uscriptList) {
        for(var script: uscriptList) {
            this.loadScript_(script);
        };
    };

    function loadScript_(script) {
        try {
            echo("loading script: " + script + "...");
            load(script);
            echo("...script loaded");
        }
        catch(var ex){
            echo("...script cannot be load: " + ex.asString());
        };
    };

    function loadXObjects_(xobjectsPath) {
        for(var xo: xobjectsPath) {
            loadXObject_(xo);
        };
    };

    function loadXObject_(xobjectPath) {
        //path 2 xobject
        var xoPath = xobjectPath.asString();
        
        //log
        echo("loading xobject: " + xoPath + "...");
        
        // find xobject name
        var xoName;
        if(xobjectPath.isA(Path)){
            xoName = xobjectPath.basename.split(".").front();
        }
        else {
            xoName = xobjectPath.asString();
        };

        if(loadedXObjects_.has(xoName)) {
            echo("...xobject already loaded");
        }
        else {
            try {
                System.loadModule(xoPath);
                
                if(this.privateObjects_.has(xoName) || !this.isXObject_(xoName)) {
                    loadedPrivateObjects_[xoName] = List.new();
                    echo("...xobject is private");
                }
                else {
                    loadedXObjects_[xoName] = List.new();
                };
                echo("...xobject loaded");
            }
            catch(var ex) {
                echo("...xobject not found! " + ex.asString());
            };
        };
    };

    function isXObject_(key) {
        var name = this.xobjectsSettings_.getOrDefault(key + ".name", key);

        try {
            if(System.eval(name + ".hasSlot(\"getXVars\");")) {
                return true;
            };
        }
        catch(var ex) {
          //echo("///////////////" + key + " exception: " + ex.asString());
        };

        return false;
    };

    function loadXObjectsPath_() {
        // xobjects 
        var xobjectsFE = ["dll", "so"];

        // remember dfg communication state
        var commStarted = this.dfgCommStarted_;

        try {
            // stop dfg communication
            this.stopDfgCommunication();

            // find all xobjects
            var xobjectPaths = this.getXObjectPaths_();
            var otherFiles = [];
            for(var dirPath: xobjectPaths) {
                var dir = Directory.new(dirPath);
                for(var path: dir.asList()) {
                    if(xobjectsFE.has(path.basename().split(".").back())
                        && this.xobjectsSettings_.containsPath(path)) {
                        var m = this.xobjectsSettings_.getXObjectSettingsFromPath(path);
                        for(var kvp: m) {
                            if(!this.xobjects4load_.has(kvp.first())) {
                                this.xobjectInfo_[kvp.first()] = kvp.second();
                                this.xobjects4load_[kvp.first()] = path;
                            };
                        };
                    }
                    else {
                        otherFiles << path;
                    };
                };
            };
        }
        finally {
            if(commStarted) {
                this.startDfgCommunication();
                this.xobjects4load_.elementAdded!;
            };
        };

        //DEBUG: log
        //echo("loading xobjects path...");
        //echo("...founded xobjets: " + this.xobjects4load_.asString());
        //echo("...founded other files: " + otherFiles.asString());
    };

    function loadSettings_() {
        var key = "xsettings";

        // mark settings as private object
        if(!privateObjects_.has(key)) {
            privateObjects_ << key;
        };
        
        loadXObject_(key);
        loadScript_("settings_collection.u");
        
        // load settings from files
        xobjectsSettings_ = SettingsCollection.new(this.getXObjectSettingFilePaths_());
    };

    function loadCore_() {
       // module names to be loaded
        var moduleList = [
            //"xcs",
            //"datalogger",
            //"xobject",
            //"xci_dodo",
            "ujson",
            //"onboard",
            //"xxci",
            
            //"xci_parrot",
        ];

        // load listed modules
        loadXObjects_(moduleList);

        // bootstrap urbiscripts
        //load("boot/boot.u");
        var uscriptList = [
            "boot/boot.u",
        ];

        loadScripts_(uscriptList);
    };

    function getXObjectPaths_() {
        //TODO: return valid xobject path
        return [
            Path.new("d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/projects/onboard/lib/Release/"),
            Path.new("d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/projects/onboard/bin/Release/")
        ];
    };

    function getScriptPaths_() {
        //TODO: return valid script path
        return [
            Path.new("d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/xcs/onboard/urbiscript/"),
            Path.new("d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/xcs/onboard/urbiscript/boot/")
        ];
    };

    function getXObjectSettingFilePaths_() {
        //TODO: return valide config path
        return [
            Path.new("d:/skola/MFF/Mgr/swProjekt/quadricopter/repository/xcs/onboard/xsetting/xobjects.xs")
        ];
    };
}|;

var onboard = Onboard.new() |;