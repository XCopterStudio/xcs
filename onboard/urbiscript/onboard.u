class Onboard {

    class XcsPaths {
        var scripts = { if("XCS_SCRIPTS_PATH" in System.env) Path.new(System.env["XCS_SCRIPTS_PATH"]) else Path.cwd / "urbiscript" };
        var settings = { if("XCS_SETTINGS_PATH" in System.env) Path.new(System.env["XCS_SETTINGS_PATH"]) else Path.cwd / "xsettings" };

        function getScript(filename) {
            scripts / filename;
        }|;

        function getSettings(filename) {
            settings / filename;
        }|; 
    };
    
    var nodeRepository_;
    var onboardSettings_;
    
    var sender_;
    var receiver_;
    
    var ddfg_ = ""; // TODO load
    
    function init() {
        // load core deps // TODO better onboard paths
        load("boot/logging.u");
        load("boot/adapter.u");
        load("boot/dfg_storage.u");
        load("boot/dfg_builder.u");
        load("boot/node_repository.u");
        load("settings_collection.u");
        
        System.loadModule("xsettings");
        System.loadModule("xjson");
        
        // load onboard settings
        onboardSettings_ = XSettings.new(XcsPaths.getSettings("onboard.xs").asString(), false);
        
        // load nodes settings
        var settingsCollection = SettingsCollection.new([XcsPaths.getSettings("xobjects.xs")]);
        nodeRepository_ = NodeRepository.new(settingsCollection);
        
        // start communication
        var adapter = Adapter.new();
        adapter.start(onboardSettings_.get("serverHost"), onboardSettings_.get("serverPort"));
        
        var json = XJson.new(); // TODO use "singleton"
        sender_ = OnboardSender.new(adapter, json);

        
        // initialize onboard receiver 4 communication with server
        receiver_ = OnboardReceiver.new(adapter,  json);
        at(receiver_.&request.changed?) {
            this.doRequest_(receiver_.request);
        };
        
    };
      

    /*
     * Handling requests
     */
    
    function doRequest_(request) {
        if(!request.has("id") || !request.has("requestData") || !request.has("requestId")) {
            //TODO: what to do with errors? send to client?
            echo("ERROR(doRequest): bad request format: " + request.asString());
            return;
        };

        var id = request["id"];
        var requestData = request["requestData"];
        var requestId = request["requestId"];
        var responseData = "";
        var responseType = "Done";

        //debug //TODO remove
        if(requestData == "") {
            echo("receive request: " + id);
        } else {
            echo("receive request: " + id + " (data: " + requestData + ")");
        };

        try {
            switch(id) {
                case "DFG_LOAD":
                    responseData = doDfgLoad_();
                case "DFG_CREATE":
                    responseData = doDfgCreate_(requestData);
                case "DFG_START":
                    responseData = doDfgStart_(requestData);
                case "DFG_STOP":
                    responseData = doDfgStop_(true, requestData);
                case "DFG_RESET":
                    responseData = doDfgReset_(true, requestData);
                case "DFG_SAVE":
                    responseData = doDfgSave_(requestData);
                case "SAVED_DFG":
                    responseData = doSavedDfg_();
                case "LOAD_DFG":
                    responseData = doLoadDfg_(requestData);
                default:
                    echo("...unknown request");
                    responseData = "Unknown request: " + id + ".";
                    responseType = "Error";
            };
        } catch(var ex) {
            //TODO: what to do with errors? send to client? + send current state (all created/started/stopped nodes)
            echo("ERROR(" + id + "): " + ex.asString());
            responseData = ex.message();
            responseType = "Error";
        };

        try {
            this.sender_.sendResponse(id, responseType, responseData, requestId);
        } catch(var ex) {
            echo("ERROR while try to send respond: " + ex.asString());
        };
    };
    
  
    // start dfg communication and send info about loaded xobjects and default dfg
    function doDfgLoad_() {
        var data = [ => ];
        data["prototype"] = nodeRepository_.getPrototypesInfo();
        data["ddfg"] = this.ddfg_;

        return data;
    };

    function doSavedDfg_() {
        var data = [ => ];
        data["savedDfg"] = DfgStorage.getGraphs();

        return data;
    };

    

}|;


var onboard = Onboard.new() |;
