function isSameType(outputXObject, inputXObject, outputXVarName, inputXInputPortName) {
	return outputXObject.getType(outputXVarName) == inputXObject.getType(inputXInputPortName);
}|;

function connect(outputXObject, inputXObject, outputXVarAddress, inputXInputPortAddress, outputXVarName, inputXInputPortName) {
	if(isSameType(outputXObject, inputXObject, outputXVarName, inputXInputPortName)) {
		outputXVarAddress >> inputXInputPortAddress; 
	}
	else {
		echo("Different type - not connected");
	};
}|;

/*
class Global.Point: UValueSerializable {
	var x;
	var y;
	function init(xx=0, yy=0) {
		x = xx|
		y = yy
	};
	function asString()	{
		"<" + x +", " + y + ">"
	};
}|;
// Add the class to Serializables
var Serializables.Point = Point;

var s = Subject.new();
var o = Observer.new();
connect(s, o, s.&val, o.&input, "val", "input");
connect(s, o, s.&val, o.&input2, "val", "input2");
s.val = -5;
o.val;
o.val2;
*/