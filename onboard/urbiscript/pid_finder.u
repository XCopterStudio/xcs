load("boot/boot.u");
// TODO make platform independent function (or cmake macro to compile UObjects w/out lib-)
System.loadModule("libujson");
System.loadModule("libxxci");
System.loadModule("libulinefinder");
System.loadModule("libulinedrawer");
System.loadModule("libulinekeeper");

/*
 * Dataflow graph
 */
 
//var xciVersion = "xci_dodo";
var xciVersion = "xci_parrot";

/*
 * Initialize nodes
 */
var xci = XXci.new(xciVersion);

var f = ULineFinder.new();
f.cameraParam = 0.73;

var d = ULineDrawer.new();
d.cameraParam = f.cameraParam;
f.setLineDrawer(d);

var k = ULineKeeper.new();
//k.cameraScale = 0.73; // TODO optimize
k.setLineDrawer(d);

var m = LineMaster.new(f, k);


/*
 * Connect nodes
 */
xci.&video >> f.&video;
xci.&theta >> f.&theta;
xci.&phi >> f.&phi;

xci.&video >> d.&video;
xci.&theta >> d.&theta;
xci.&phi >> d.&phi;

xci.&velocityX >> k.&vx;
xci.&velocityY >> k.&vy;
xci.&altitude >> k.&altitude;
xci.&psi >> k.&psi;

// Default values for image processing
f.houghRho = 5;
f.houghMinLength = 20; // for Parrot resolution should be larger
f.autoHsvValueRangeEnabled = true;
f.autoHsvValueRangeRatio = 0.4; // for Parrot the less the better probably
f.distanceAging = 0.5;
f.hystDirThreshold = 0.3;
f.hystForgetRatio = 0.7;
f.hystCenterThreshold = 0.1;

/*
 * Start dataflow
 */
serverConnect("127.0.0.1", 1234, xci, xciVersion),; // beware the comma

xci.xciInit();
m.start(),; // would block

// 4 DODO
if(xciVersion == "xci_dodo") {
    //xci.setConfiguration("video:timestamps", "1");
    xci.setConfiguration("video:filename", "/tmp/video.xcs");
    //xci.setConfiguration("video:filename", "/home/michal/Videos/Paris, je t'aime (2006)/Paris, je t'aime 2.avi");
    
    //xci.setConfiguration("video:fps", "4");
    //xci.setConfiguration("video:fps", "50");
    xci.doCommand("Load");
    xci.doCommand("Play");
};

// 4 parrot
if(xciVersion == "xci_parrot") {
    sleep(1s);
    xci.flyParamPersistence = 25;
    xci.setConfiguration("video:video_channel", "1");
    //xci.command = "TakeOff";
    sleep(4s);
};

var rollPidParam = PidParams.new(0.4, 0, 0);
var yawPidParam = PidParams.new(0.5, 0, 0);
var pitchPidParam = PidParams.new(0.1, 0.1, -0.02);
var gazPidParam = PidParams.new(0.5, 0, 0);
var a = Aligner.new(xci, m, rollPidParam, yawPidParam, pitchPidParam, gazPidParam);

k.start(f.distance, f.deviation);
every(100ms) {
   d.drawFullLine(m.distance, m.deviation, 2, 3); 
},;

//echo("adjust GAZ");
//a.adjustGaz(), while((xci.altitude - a.gazAltitude).abs() > 0.1) { sleep(100ms) };
//echo("adjust ROLL, PITCH, YAW");
//a.adjustRoll(), a.adjustYaw(), a.adjustPitch(),;

//a.adjustYaw(),;
//a.adjustRoll(), a.adjustYaw(), a.adjustPitch(), a.adjustGaz(), ;
//a.adjustRoll(),;
